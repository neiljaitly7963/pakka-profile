{"version":3,"sources":["logo.svg","components/Letters.js","components/Table.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Letters","lettersArray","createWord","map","letter","index","onClick","bind","id","key","className","useStyles","makeStyles","table","minWidth","SimpleTable","wordsArray","classes","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","word","scope","length","Button","Input","wordInProgress","addWord","variant","color","App","props","tempWord","state","console","log","setState","tempWordsArray","JSON","parse","stringify","push","alert","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.64510c6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Letters.css';\r\n\r\nconst Letters = ({lettersArray, createWord}) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\tlettersArray.map((letter, index) => {\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<button onClick={createWord.bind(this, index)} id={index} key={index}>\r\n\t\t\t\t\t\t\t<span className=\"letter\"><p className='lettertext'>{letter}</p></span>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Letters;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport './Table.css';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nexport default function SimpleTable({wordsArray}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Word</TableCell>\r\n            <TableCell align=\"right\">Count</TableCell>\r\n            <TableCell align=\"right\">Action</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {wordsArray.map((word) => (\r\n            <TableRow key={word}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {word}\r\n              </TableCell>\r\n              <TableCell align=\"right\"><div className=\"circle\"><span className=\"count\">{word.length}</span></div></TableCell>\r\n              <TableCell align=\"right\"><Button>Remove</Button></TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\nimport './Input.css';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst Input = ({wordInProgress, addWord}) => {\r\n\treturn(\r\n\t\t<div className=\"Input\">\r\n\t\t\t<p>{wordInProgress}</p><Button variant=\"contained\" color=\"secondary\" onClick={addWord}>Add</Button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Input;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Letters from './components/Letters'\nimport Table from './components/Table'\nimport Input from './components/Input'\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      lettersArray: [\"P\", \"L\", \"P\", \"T\", \"S\", \"A\", \"C\", \"E\", \"H\", \"D\"],\n      wordsArray: [],\n      wordInProgress: \"\"\n    };\n  }  \n\n  createWord = (index) => {\n    var tempWord = this.state.wordInProgress\n    console.log(tempWord, \"before\")\n    tempWord = tempWord + this.state.lettersArray[index]\n    console.log(tempWord, \"after\")\n    this.setState({wordInProgress: tempWord}, () => console.log(this.state.wordInProgress))\n  }\n\n  addWord = () => {\n    if (this.state.wordInProgress !== \"\") {\n    let tempWordsArray = JSON.parse(JSON.stringify(this.state.wordsArray));\n    tempWordsArray.push(this.state.wordInProgress)\n    this.setState({wordsArray: tempWordsArray}, () => this.setState({wordInProgress: \"\"}))      \n    }\n    else{\n      alert(\"Please click on letters to create a word!\");\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Letters lettersArray={this.state.lettersArray} createWord={this.createWord} />\n        <Input wordInProgress={this.state.wordInProgress} addWord={this.addWord} />\n        <Table wordsArray={this.state.wordsArray} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}